/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.knowledge.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KnowledgeBaseVersion.Builder.class)
public final class KnowledgeBaseVersion {
    private final KnowledgeBaseVersionType type;

    private final Map<String, Object> additionalProperties;

    private KnowledgeBaseVersion(KnowledgeBaseVersionType type, Map<String, Object> additionalProperties) {
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether the completed version constitutes a full or partial refresh of the knowledge base. Deleting and updating documents is only supported for partial refreshes.
     */
    @JsonProperty("type")
    public KnowledgeBaseVersionType getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KnowledgeBaseVersion && equalTo((KnowledgeBaseVersion) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KnowledgeBaseVersion other) {
        return type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(@NotNull KnowledgeBaseVersionType type);

        Builder from(KnowledgeBaseVersion other);
    }

    public interface _FinalStage {
        KnowledgeBaseVersion build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private KnowledgeBaseVersionType type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(KnowledgeBaseVersion other) {
            type(other.getType());
            return this;
        }

        /**
         * <p>Indicates whether the completed version constitutes a full or partial refresh of the knowledge base. Deleting and updating documents is only supported for partial refreshes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull KnowledgeBaseVersionType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public KnowledgeBaseVersion build() {
            return new KnowledgeBaseVersion(type, additionalProperties);
        }
    }
}
